import React, { useState, useEffect } from "react";
import { useParams, useNavigate, useLocation } from "react-router-dom";
import { format, addDays, parseISO, addMinutes } from "date-fns";
import Calendar from "react-calendar";
import { supabase } from "../lib/supabase";
import bookingApi from "../utils/bookingApi";
import "react-calendar/dist/Calendar.css";
import { useAuth } from "../contexts/AuthContext";

function ClientBooking() {
  const { bookingTypeId } = useParams();
  const navigate = useNavigate();
  const location = useLocation();
  const [user] = useAuth();
  const [loading, setLoading] = useState(true);
  const [bookingType, setBookingType] = useState(null);
  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedTime, setSelectedTime] = useState(null);
  const [availableTimes, setAvailableTimes] = useState([]);
  const [clientInfo, setClientInfo] = useState({
    name: "",
    email: "",
    notes: "",
  });
  const [submitting, setSubmitting] = useState(false);
  const [success, setSuccess] = useState(false);

  useEffect(() => {
    const fetchBookingType = async () => {
      try {
        const res = await bookingApi.get(`/booking-type/${bookingTypeId}`);
        if (res.status === 200) {
          setBookingType(res.data);
        }
      } catch (error) {
        console.error("Error fetching booking type:", error);
      } finally {
        setLoading(false);
      }
    };

    if (bookingTypeId) fetchBookingType();
  }, [bookingTypeId]);

  useEffect(() => {
    const generateTimeSlots = async () => {
      if (!selectedDate || !bookingType) return;

      try {
        const startOfDay = new Date(selectedDate);
        startOfDay.setHours(9, 0, 0, 0);

        const endOfDay = new Date(selectedDate);
        endOfDay.setHours(17, 0, 0, 0);

        const res = await bookingApi.get(
          `/prev/bookings?bookingTypeId=${bookingTypeId}&date=${selectedDate}`
        );

        const existingBookings = res.data;

        const bookedTimes = new Set(
          existingBookings?.map((b) =>
            format(parseISO(b.booking_time), "HH:mm")
          ) || []
        );

        const slots = [];
        let currentTime = startOfDay;

        while (currentTime < endOfDay) {
          const timeString = format(currentTime, "HH:mm");
          if (!bookedTimes.has(timeString)) {
            slots.push({
              time: currentTime,
              formatted: format(currentTime, "h:mm a"),
            });
          }
          currentTime = addMinutes(currentTime, 30);
        }

        setAvailableTimes(slots);
      } catch (error) {
        console.error("Error generating time slots:", error);
      }
    };

    generateTimeSlots();
  }, [selectedDate, bookingTypeId, bookingType]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!selectedDate || !selectedTime || !clientInfo.name || !clientInfo.email)
      return;

    if (!user) {
      // Save current location + form data in redirect state
      navigate("/login", {
        state: {
          from: location.pathname + location.search,
          bookingData: {
            selectedDate,
            selectedTime,
            clientInfo,
            bookingTypeId,
          },
        },
      });
      return;
    }

    try {
      setSubmitting(true);
      const bookingTime = new Date(selectedDate);
      bookingTime.setHours(selectedTime.time.getHours());
      bookingTime.setMinutes(selectedTime.time.getMinutes());

      const res = await bookingApi.post("/add/booking", {
        booking_type_id: bookingTypeId,
        user_id: bookingType.user_id,
        client_name: clientInfo.name,
        client_email: clientInfo.email,
        client_notes: clientInfo.notes,
        booking_time: bookingTime.toISOString(),
      });

      setSuccess(true);
    } catch (error) {
      console.error("Error creating booking:", error);
      alert("Failed to create booking. Please try again.");
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (success) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="bg-white p-8 rounded-lg shadow-lg max-w-md w-full text-center">
          <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span className="text-green-500 text-2xl">✓</span>
          </div>
          <h2 className="text-2xl font-bold mb-4">Booking Confirmed!</h2>
          <p className="text-gray-600">
            Thank you for booking. You will receive a confirmation email
            shortly.
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-3xl mx-auto">
        <div className="bg-white rounded-lg shadow-lg overflow-hidden">
          <div className="px-6 py-8">
            <h1 className="text-2xl font-bold text-center mb-8">
              {bookingType?.name}
            </h1>
            {bookingType.description && (
              <p className="text-small"> {bookingType.description}</p>
            )}
            <div className="space-y-8">
              {!selectedDate ? (
                <div>
                  <h2 className="text-lg font-medium mb-4">Select a Date</h2>
                  <Calendar
                    onChange={setSelectedDate}
                    minDate={new Date()}
                    maxDate={addDays(new Date(), 30)}
                    className="mx-auto"
                  />
                </div>
              ) : !selectedTime ? (
                <div>
                  <button
                    onClick={() => setSelectedDate(null)}
                    className="text-blue-500 mb-4"
                  >
                    ← Change Date
                  </button>
                  <h2 className="text-lg font-medium mb-4">Select a Time</h2>
                  <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                    {availableTimes.map((slot, index) => (
                      <button
                        key={index}
                        onClick={() => setSelectedTime(slot)}
                        className="p-3 text-center border rounded-lg hover:border-blue-500"
                      >
                        {slot.formatted}
                      </button>
                    ))}
                  </div>
                </div>
              ) : (
                <form onSubmit={handleSubmit} className="space-y-6">
                  <button
                    type="button"
                    onClick={() => setSelectedTime(null)}
                    className="text-blue-500"
                  >
                    ← Change Time
                  </button>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      Name
                    </label>
                    <input
                      type="text"
                      required
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                      value={clientInfo.name}
                      onChange={(e) =>
                        setClientInfo({ ...clientInfo, name: e.target.value })
                      }
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      Email
                    </label>
                    <input
                      type="email"
                      required
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                      value={clientInfo.email}
                      onChange={(e) =>
                        setClientInfo({ ...clientInfo, email: e.target.value })
                      }
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      Notes (Optional)
                    </label>
                    <textarea
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                      rows="3"
                      value={clientInfo.notes}
                      onChange={(e) =>
                        setClientInfo({ ...clientInfo, notes: e.target.value })
                      }
                    />
                  </div>
                  <button
                    type="submit"
                    disabled={submitting}
                    className="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 disabled:opacity-50"
                  >
                    {submitting ? "Confirming..." : "Confirm Booking"}
                  </button>
                </form>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default ClientBooking;
